import { AxiosInstance } from 'axios';
import { AccountInfo, BroadcastResponseData, Contact, EventType, File, Location, Message, MessageOptions, Picture, RichMedia, Sender, SucceededResponseData, UserDetails, UserOnlineStatus, Video } from './ViberTypes';
declare type ClientConfig = {
    accessToken: string;
    sender: Sender;
    origin?: string;
    onRequest?: Function;
};
/**
 * https://developers.viber.com/docs/api/rest-bot-api/#viber-rest-api
 */
export default class ViberClient {
    static connect(accessTokenOrConfig: string | ClientConfig, sender?: Sender): ViberClient;
    _token: string;
    _sender: Sender;
    _onRequest: Function;
    _axios: AxiosInstance;
    constructor(accessTokenOrConfig: string | ClientConfig, sender?: Sender);
    readonly axios: AxiosInstance;
    readonly accessToken: string;
    _callAPI<R extends object>(path: string, body?: Record<string, any>): Promise<SucceededResponseData<R> | never>;
    /**
     * Webhooks
     *
     * https://viber.github.io/docs/api/rest-bot-api/#webhooks
     */
    /**
     * Setting a Webhook
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#setting-a-webhook
     */
    setWebhook(url: string, optionsOrEventTypes?: EventType[] | {
        eventTypes?: EventType[];
        sendName?: boolean;
        sendPhoto?: boolean;
    }): Promise<SucceededResponseData<{
        eventTypes: EventType[];
    }> | never>;
    /**
     * Removing your webhook
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#removing-your-webhook
     */
    removeWebhook(): Promise<SucceededResponseData<{
        eventTypes: EventType[];
    }> | never>;
    /**
     * Send Message
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#send-message
     */
    sendMessage(receiver: string, message: Message): Promise<SucceededResponseData<{
        messageToken: number;
    }> | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#text-message
     */
    sendText(receiver: string, text: string, options?: MessageOptions): Promise<SucceededResponseData<{
        messageToken: number;
    }> | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#picture-message
     */
    sendPicture(receiver: string, { text, media, thumbnail }: Picture, options?: MessageOptions): Promise<SucceededResponseData<{
        messageToken: number;
    }> | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#video-message
     */
    sendVideo(receiver: string, { media, size, thumbnail, duration }: Video, options?: MessageOptions): Promise<SucceededResponseData<{
        messageToken: number;
    }> | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#file-message
     */
    sendFile(receiver: string, file: File, options?: MessageOptions): Promise<SucceededResponseData<{
        messageToken: number;
    }> | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#contact-message
     */
    sendContact(receiver: string, contact: Contact, options?: MessageOptions): Promise<SucceededResponseData<{
        messageToken: number;
    }> | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#location-message
     */
    sendLocation(receiver: string, { lat, lon }: Location, options?: MessageOptions): Promise<SucceededResponseData<{
        messageToken: number;
    }> | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#url-message
     */
    sendURL(receiver: string, url: string, options?: MessageOptions): Promise<SucceededResponseData<{
        messageToken: number;
    }> | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#sticker-message
     */
    sendSticker(receiver: string, stickerId: number, options?: MessageOptions): Promise<SucceededResponseData<{
        messageToken: number;
    }> | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#carousel-content-message
     */
    sendCarouselContent(receiver: string, richMedia: RichMedia, options?: MessageOptions): Promise<SucceededResponseData<{
        messageToken: number;
    }> | never>;
    /**
     * Broadcast Message
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#broadcast-message
     */
    broadcastMessage(broadcastList: string[], message: Message): Promise<BroadcastResponseData | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#text-message
     */
    broadcastText(broadcastList: string[], text: string, options?: MessageOptions): Promise<BroadcastResponseData | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#picture-message
     */
    broadcastPicture(broadcastList: string[], { text, media, thumbnail }: Picture, options?: MessageOptions): Promise<BroadcastResponseData | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#video-message
     */
    broadcastVideo(broadcastList: string[], { media, size, thumbnail, duration }: Video, options?: MessageOptions): Promise<BroadcastResponseData | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#file-message
     */
    broadcastFile(broadcastList: string[], file: File, options?: MessageOptions): Promise<BroadcastResponseData | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#contact-message
     */
    broadcastContact(broadcastList: string[], contact: Contact, options?: MessageOptions): Promise<BroadcastResponseData | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#location-message
     */
    broadcastLocation(broadcastList: string[], { lat, lon }: Location, options?: MessageOptions): Promise<BroadcastResponseData | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#url-message
     */
    broadcastURL(broadcastList: string[], url: string, options?: MessageOptions): Promise<BroadcastResponseData | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#sticker-message
     */
    broadcastSticker(broadcastList: string[], stickerId: number, options?: MessageOptions): Promise<BroadcastResponseData | never>;
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#carousel-content-message
     */
    broadcastCarouselContent(broadcastList: string[], richMedia: RichMedia, options?: MessageOptions): Promise<BroadcastResponseData | never>;
    /**
     * Get Account Info
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#get-account-info
     */
    getAccountInfo(): Promise<SucceededResponseData<AccountInfo> | never>;
    /**
     * Get User Details
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#get-user-details
     */
    getUserDetails(id: string): Promise<UserDetails | never>;
    /**
     * Get Online
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#get-online
     */
    getOnlineStatus(ids: string[]): Promise<UserOnlineStatus[] | never>;
}
export {};
//# sourceMappingURL=ViberClient.d.ts.map