import { AxiosInstance } from 'axios';
declare type LinePayConfig = {
    channelId: string;
    channelSecret: string;
    sandbox?: boolean;
    origin?: string;
};
declare type LinePayCurrency = 'USD' | 'JPY' | 'TWD' | 'THB';
export default class LinePay {
    static connect(config: LinePayConfig): LinePay;
    _axios: AxiosInstance;
    constructor({ channelId, channelSecret, sandbox, origin, }: LinePayConfig);
    readonly axios: AxiosInstance;
    getPayments({ transactionId, orderId, }?: {
        transactionId?: string;
        orderId?: string;
    }): Promise<any>;
    getAuthorizations({ transactionId, orderId, }?: {
        transactionId?: string;
        orderId?: string;
    }): Promise<any>;
    reserve({ productName, amount, currency, confirmUrl, orderId, ...options }: {
        productName: string;
        amount: number;
        currency: LinePayCurrency;
        confirmUrl: string;
        orderId: string;
        productImageUrl?: string;
        mid?: string;
        oneTimeKey?: string;
        confirmUrlType?: 'CLIENT' | 'SERVER';
        checkConfirmUrlBrowser?: boolean;
        cancelUrl?: string;
        packageName?: string;
        deliveryPlacePhone?: string;
        payType?: 'NORMAL' | 'PREAPPROVED';
        langCd?: 'ja' | 'ko' | 'en' | 'zh-Hans' | 'zh-Hant' | 'th';
        capture?: boolean;
        extras?: Record<string, any>;
    }): Promise<any>;
    confirm(transactionId: string, { amount, currency, }: {
        amount: number;
        currency: LinePayCurrency;
    }): Promise<any>;
    capture(transactionId: string, { amount, currency, }: {
        amount: number;
        currency: LinePayCurrency;
    }): Promise<any>;
    void(transactionId: string): Promise<any>;
    refund(transactionId: string, options?: {
        refundAmount?: number;
    }): Promise<any>;
}
export {};
//# sourceMappingURL=LinePay.d.ts.map