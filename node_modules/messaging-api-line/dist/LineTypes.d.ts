export declare type User = {
    displayName: string;
    userId: string;
    pictureUrl: string;
    statusMessage: string;
};
export declare type ImageMessage = {
    type: 'image';
    originalContentUrl: string;
    previewImageUrl: string;
};
export declare type ImageMapArea = {
    x: number;
    y: number;
    width: number;
    height: number;
};
export declare type ImageMapUriAction = {
    type: 'uri';
    label?: string;
    linkUri: string;
    area: ImageMapArea;
};
export declare type ImageMapMessageAction = {
    type: 'message';
    label?: string;
    text: string;
    area: ImageMapArea;
};
export declare type ImagemapMessage = {
    type: 'imagemap';
    baseUrl: string;
    altText: string;
    baseSize: {
        height: number;
        width: number;
    };
    video?: ImageMapVideo;
    actions: (ImageMapUriAction | ImageMapMessageAction)[];
};
export declare type VideoMessage = {
    type: 'video';
    originalContentUrl: string;
    previewImageUrl: string;
};
export declare type AudioMessage = {
    type: 'audio';
    originalContentUrl: string;
    duration: number;
};
export declare type Location = {
    title: string;
    address: string;
    latitude: number;
    longitude: number;
};
export declare type LocationMessage = {
    type: 'location';
    title: string;
    address: string;
    latitude: number;
    longitude: number;
};
export declare type StickerMessage = {
    type: 'sticker';
    packageId: string;
    stickerId: string;
};
export declare type PostbackAction = {
    type: 'postback';
    label?: string;
    data: string;
    text?: string;
    displayText?: string;
};
export declare type MessageAction = {
    type: 'message';
    label?: string;
    text: string;
};
export declare type URIAction = {
    type: 'uri';
    label?: string;
    uri: string;
};
export declare type DatetimePickerAction = {
    type: 'datetimepicker';
    label?: string;
    data: string;
    mode: string;
    initial?: string;
    max?: string;
    min?: string;
};
export declare type CameraAction = {
    type: 'camera';
    label: string;
};
export declare type CameraRollAction = {
    type: 'cameraRoll';
    label: string;
};
export declare type LocationAction = {
    type: 'location';
    label: string;
};
export declare type TemplateAction = PostbackAction | MessageAction | URIAction | DatetimePickerAction;
export declare type QuickReplyAction = PostbackAction | MessageAction | DatetimePickerAction | CameraAction | CameraRollAction | LocationAction;
export declare type QuickReply = {
    items: {
        type: 'action';
        imageUrl?: string;
        action: QuickReplyAction;
    }[];
};
export declare type MessageOptions = {
    quickReply?: QuickReply;
};
export declare type TemplateMessage<Template> = {
    type: 'template';
    altText: string;
    template: Template;
};
export declare type ButtonsTemplate = {
    type: 'buttons';
    thumbnailImageUrl?: string;
    imageAspectRatio?: 'rectangle' | 'square';
    imageSize?: 'cover' | 'contain';
    imageBackgroundColor?: string;
    title?: string;
    text: string;
    defaultAction?: TemplateAction;
    actions: TemplateAction[];
};
export declare type ConfirmTemplate = {
    type: 'confirm';
    text: string;
    actions: TemplateAction[];
};
export declare type ColumnObject = {
    thumbnailImageUrl?: string;
    title?: string;
    text: string;
    defaultAction?: TemplateAction;
    actions: TemplateAction[];
};
export declare type CarouselTemplate = {
    type: 'carousel';
    columns: ColumnObject[];
    imageAspectRatio?: 'rectangle' | 'square';
    imageSize?: 'cover' | 'contain';
};
export declare type ImageCarouselColumnObject = {
    imageUrl: string;
    action: TemplateAction;
};
export declare type ImageCarouselTemplate = {
    type: 'image_carousel';
    columns: ImageCarouselColumnObject[];
};
export declare type Template = ButtonsTemplate | ConfirmTemplate | CarouselTemplate | ImageCarouselTemplate;
declare type Size = 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
declare type FlexBlockStyle = {
    backgroundColor?: string;
    separator?: boolean;
    separatorColor?: string;
};
declare type FlexBubbleStyle = {
    header?: FlexBlockStyle;
    hero?: FlexBlockStyle;
    body?: FlexBlockStyle;
    footer?: FlexBlockStyle;
};
declare type FlexButton = {
    type: 'button';
    action: TemplateAction;
    flex?: number;
    margin?: Size;
    height?: 'sm' | 'md';
    style?: 'link' | 'primary' | 'secondary';
    color?: string;
    gravity?: string;
};
declare type FlexFiller = {
    type: 'filler';
};
declare type FlexIcon = {
    type: 'icon';
    url: string;
    margin?: Size;
    size?: 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | '3xl' | '4xl' | '5xl';
    asprctRatio?: '1:1' | '2:1' | '3:1';
};
declare type FlexImage = {
    type: 'image';
    url: string;
    flex?: number;
    margin?: Size;
    align?: 'start' | 'end' | 'center';
    gravity?: 'top' | 'bottom' | 'center';
    size?: 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | '3xl' | '4xl' | '5xl' | 'full';
    aspectRatio?: '1:1' | '1.51:1' | '1.91:1' | '4:3' | '16:9' | '20:13' | '2:1' | '3:1' | '3:4' | '9:16' | '1:2' | '1:3';
    aspectMode?: 'cover' | 'fit';
    backgroundColor?: string;
    action?: TemplateAction;
};
declare type FlexSeparator = {
    type: 'separator';
    margin?: Size;
    color?: string;
};
declare type FlexSpacer = {
    type: 'spacer';
    size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
};
declare type FlexText = {
    type: 'text';
    text: string;
    flex?: number;
    margin?: Size;
    size?: 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | '3xl' | '4xl' | '5xl';
    align?: 'start' | 'end' | 'center';
    gravity?: 'top' | 'bottom' | 'center';
    wrap?: boolean;
    maxLines?: number;
    weight?: 'regular' | 'bold';
    color?: string;
    action?: TemplateAction;
};
declare type FlexBoxContent = FlexButton | FlexIcon | FlexImage | FlexText | FlexFiller | FlexSeparator | FlexSpacer;
declare type FlexBox = {
    type: 'box';
    layout: 'horizontal' | 'vertical' | 'baseline';
    contents: FlexBox[] | FlexBoxContent[];
    flex?: number;
    spacing?: Size;
    margin?: Size;
    action?: TemplateAction;
};
declare type FlexBubbleContainer = {
    type: 'bubble';
    direction?: 'ltr' | 'rtl';
    header?: FlexBox;
    hero?: FlexImage;
    body?: FlexBox;
    footer?: FlexBox;
    styles?: FlexBubbleStyle;
};
declare type FlexCarouselContainer = {
    type: 'carousel';
    contents: FlexBubbleContainer[];
};
export declare type FlexContainer = FlexBubbleContainer | FlexCarouselContainer;
export declare type FlexMessage = {
    type: 'flex';
    altText: string;
    contents: FlexContainer;
};
export declare type Message = TextMessage | ImageMessage | ImagemapMessage | VideoMessage | AudioMessage | LocationMessage | StickerMessage | TemplateMessage<Template> | FlexMessage;
declare type Area = {
    bounds: {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    action: {
        type: string;
        data: string;
    };
};
export declare type RichMenu = {
    size: {
        width: 2500;
        height: 1686 | 843;
    };
    selected: boolean;
    name: string;
    chatBarText: string;
    areas: Area[];
};
export declare type LiffView = {
    type: 'compact' | 'tall' | 'full';
    url: string;
};
export declare type MutationSuccessResponse = {};
export declare type ImageMapVideo = {
    originalContentUrl: string;
    previewImageUrl: string;
    area: {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    externalLink: {
        linkUri: string;
        label: string;
    };
};
export declare type TextMessage = {
    type: 'text';
    text: string;
};
export {};
//# sourceMappingURL=LineTypes.d.ts.map