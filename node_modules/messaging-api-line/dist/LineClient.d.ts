/// <reference types="node" />
import { AxiosInstance } from 'axios';
import { ButtonsTemplate, ColumnObject, ConfirmTemplate, FlexContainer, ImageCarouselColumnObject, ImagemapMessage, LiffView, Location, Message, MessageOptions, MutationSuccessResponse, RichMenu, StickerMessage, Template, User } from './LineTypes';
declare type ClientConfig = {
    accessToken: string;
    channelSecret: string;
    origin?: string;
    onRequest?: Function;
};
export default class LineClient {
    static connect(accessTokenOrConfig: string | ClientConfig, channelSecret?: string): LineClient;
    _channelSecret: string;
    _onRequest: Function;
    _axios: AxiosInstance;
    _accessToken: string;
    constructor(accessTokenOrConfig: string | ClientConfig, channelSecret?: string);
    readonly axios: AxiosInstance;
    readonly accessToken: string;
    /**
     * Reply Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-reply-message
     */
    replyRawBody(body: {
        replyToken: string;
        messages: Message[];
    }, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<MutationSuccessResponse>;
    reply(replyToken: string, messages: Message[], options?: Record<string, any>): Promise<MutationSuccessResponse>;
    replyMessages(replyToken: string, messages: Message[], options?: Record<string, any>): Promise<MutationSuccessResponse>;
    replyText(replyToken: string, text: string, options: MessageOptions): Promise<MutationSuccessResponse>;
    replyImage(replyToken: string, image: {
        originalContentUrl: string;
        previewImageUrl?: string;
    }, options: MessageOptions): Promise<MutationSuccessResponse>;
    replyVideo(replyToken: string, video: {
        originalContentUrl: string;
        previewImageUrl: string;
    }, options?: MessageOptions): Promise<MutationSuccessResponse>;
    replyAudio(replyToken: string, audio: {
        originalContentUrl: string;
        duration: number;
    }, options?: MessageOptions): Promise<MutationSuccessResponse>;
    replyLocation(replyToken: string, location: Location, options?: MessageOptions): Promise<MutationSuccessResponse>;
    replySticker(replyToken: string, sticker: Omit<StickerMessage, 'type'>, options?: MessageOptions): Promise<MutationSuccessResponse>;
    /**
     * Imagemap Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#imagemap-message
     */
    replyImagemap(replyToken: string, altText: string, imagemap: Omit<ImagemapMessage, 'type' | 'altText'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    /**
     * Flex Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#flex-message
     */
    replyFlex(replyToken: string, altText: string, flex: FlexContainer, options: MessageOptions): Promise<MutationSuccessResponse>;
    /**
     * Template Messages
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#template-messages
     */
    replyTemplate(replyToken: string, altText: string, template: Template, options: MessageOptions): Promise<MutationSuccessResponse>;
    replyButtonTemplate(replyToken: string, altText: string, buttonTemplate: Omit<ButtonsTemplate, 'type'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    replyButtonsTemplate(replyToken: string, altText: string, buttonTemplate: Omit<ButtonsTemplate, 'type'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    replyConfirmTemplate(replyToken: string, altText: string, confirmTemplate: Omit<ConfirmTemplate, 'type'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    replyCarouselTemplate(replyToken: string, altText: string, columns: ColumnObject[], { imageAspectRatio, imageSize, ...options }?: {
        imageAspectRatio?: 'rectangle' | 'square';
        imageSize?: 'cover' | 'contain';
    } & MessageOptions): Promise<MutationSuccessResponse>;
    replyImageCarouselTemplate(replyToken: string, altText: string, columns: ImageCarouselColumnObject[], options: MessageOptions): Promise<MutationSuccessResponse>;
    /**
     * Push Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-push-message
     */
    pushRawBody(body: {
        to: string;
        messages: Message[];
    }, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<MutationSuccessResponse>;
    push(to: string, messages: Message[], options: Record<string, any>): Promise<MutationSuccessResponse>;
    pushMessages(to: string, messages: Message[], options: Record<string, any>): Promise<MutationSuccessResponse>;
    pushText(to: string, text: string, options: MessageOptions): Promise<MutationSuccessResponse>;
    pushImage(to: string, image: {
        originalContentUrl: string;
        previewImageUrl?: string;
    }, options: MessageOptions): Promise<MutationSuccessResponse>;
    pushVideo(to: string, video: {
        originalContentUrl: string;
        previewImageUrl: string;
    }, options: MessageOptions): Promise<MutationSuccessResponse>;
    pushAudio(to: string, audio: {
        originalContentUrl: string;
        duration: number;
    }, options: MessageOptions): Promise<MutationSuccessResponse>;
    pushLocation(to: string, location: Location, options: MessageOptions): Promise<MutationSuccessResponse>;
    pushSticker(to: string, sticker: Omit<StickerMessage, 'type'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    /**
     * Imagemap Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#imagemap-message
     */
    pushImagemap(to: string, altText: string, imagemap: Omit<ImagemapMessage, 'type' | 'altText'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    /**
     * Flex Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#flex-message
     */
    pushFlex(to: string, altText: string, flex: FlexContainer, options: MessageOptions): Promise<MutationSuccessResponse>;
    /**
     * Template Messages
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#template-messages
     */
    pushTemplate(to: string, altText: string, template: Template, options: MessageOptions): Promise<MutationSuccessResponse>;
    pushButtonTemplate(to: string, altText: string, buttonTemplate: Omit<ButtonsTemplate, 'type'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    pushButtonsTemplate(to: string, altText: string, buttonTemplate: Omit<ButtonsTemplate, 'type'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    pushConfirmTemplate(to: string, altText: string, confirmTemplate: Omit<ConfirmTemplate, 'type'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    pushCarouselTemplate(to: string, altText: string, columns: ColumnObject[], { imageAspectRatio, imageSize, ...options }?: {
        imageAspectRatio?: 'rectangle' | 'square';
        imageSize?: 'cover' | 'contain';
    } & MessageOptions): Promise<MutationSuccessResponse>;
    pushImageCarouselTemplate(to: string, altText: string, columns: ImageCarouselColumnObject[], options: MessageOptions): Promise<MutationSuccessResponse>;
    /**
     * Multicast
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-multicast-messages
     */
    multicastRawBody(body: {
        to: string[];
        messages: Message[];
    }, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<MutationSuccessResponse>;
    multicast(to: string[], messages: Message[], options: Record<string, any>): Promise<MutationSuccessResponse>;
    multicastMessages(to: string[], messages: Message[], options: Record<string, any>): Promise<MutationSuccessResponse>;
    multicastText(to: string[], text: string, options: MessageOptions): Promise<MutationSuccessResponse>;
    multicastImage(to: string[], image: {
        originalContentUrl: string;
        previewImageUrl?: string;
    }, options: MessageOptions): Promise<MutationSuccessResponse>;
    multicastVideo(to: string[], video: {
        originalContentUrl: string;
        previewImageUrl: string;
    }, options: MessageOptions): Promise<MutationSuccessResponse>;
    multicastAudio(to: string[], audio: {
        originalContentUrl: string;
        duration: number;
    }, options: MessageOptions): Promise<MutationSuccessResponse>;
    multicastLocation(to: string[], location: Location, options: MessageOptions): Promise<MutationSuccessResponse>;
    multicastSticker(to: string[], sticker: Omit<StickerMessage, 'type'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    /**
     * Imagemap Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#imagemap-message
     */
    multicastImagemap(to: string[], altText: string, imagemap: Omit<ImagemapMessage, 'type' | 'altText'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    /**
     * Flex Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#flex-message
     */
    multicastFlex(to: string[], altText: string, flex: FlexContainer, options: MessageOptions): Promise<MutationSuccessResponse>;
    /**
     * Template Messages
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#template-messages
     */
    multicastTemplate(to: string[], altText: string, template: Template, options: MessageOptions): Promise<MutationSuccessResponse>;
    multicastButtonTemplate(to: string[], altText: string, buttonTemplate: Omit<ButtonsTemplate, 'type'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    multicastButtonsTemplate(to: string[], altText: string, buttonTemplate: Omit<ButtonsTemplate, 'type'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    multicastConfirmTemplate(to: string[], altText: string, confirmTemplate: Omit<ConfirmTemplate, 'type'>, options: MessageOptions): Promise<MutationSuccessResponse>;
    multicastCarouselTemplate(to: string[], altText: string, columns: ColumnObject[], { imageAspectRatio, imageSize, ...options }?: {
        imageAspectRatio?: 'rectangle' | 'square';
        imageSize?: 'cover' | 'contain';
    } & MessageOptions): Promise<MutationSuccessResponse>;
    multicastImageCarouselTemplate(to: string[], altText: string, columns: ImageCarouselColumnObject[], options: MessageOptions): Promise<MutationSuccessResponse>;
    /**
     * Content
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-content
     */
    retrieveMessageContent(messageId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<Buffer>;
    /**
     * Get User Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-profile
     * displayName, userId, pictureUrl, statusMessage
     */
    getUserProfile(userId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<User>;
    /**
     * Get Group Member Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-group-member-profile
     */
    getGroupMemberProfile(groupId: string, userId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<any>;
    /**
     * Get Room Member Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-room-member-profile
     */
    getRoomMemberProfile(roomId: string, userId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<any>;
    /**
     * Get Group Member IDs
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-group-member-user-ids
     */
    getGroupMemberIds(groupId: string, start?: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<{
        memberIds: string[];
        next?: string;
    }>;
    getAllGroupMemberIds(groupId: string, options?: Record<string, any>): Promise<string[]>;
    /**
     * Get Room Member IDs
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-room-member-user-ids
     */
    getRoomMemberIds(roomId: string, start?: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<{
        memberIds: string[];
        next?: string;
    }>;
    getAllRoomMemberIds(roomId: string, options?: Record<string, any>): Promise<string[]>;
    /**
     * Leave Group
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#leave-group
     */
    leaveGroup(groupId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<MutationSuccessResponse>;
    /**
     * Leave Room
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#leave-room
     */
    leaveRoom(roomId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<MutationSuccessResponse>;
    /**
     * Rich Menu
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#rich-menu
     */
    getRichMenuList({ accessToken: customAccessToken, }?: {
        accessToken?: string;
    }): Promise<any>;
    getRichMenu(richMenuId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<any>;
    createRichMenu(richMenu: RichMenu, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<any>;
    deleteRichMenu(richMenuId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<any>;
    getLinkedRichMenu(userId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<any>;
    linkRichMenu(userId: string, richMenuId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<any>;
    unlinkRichMenu(userId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<any>;
    getDefaultRichMenu({ accessToken: customAccessToken, }?: {
        accessToken?: string;
    }): Promise<any>;
    setDefaultRichMenu(richMenuId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<any>;
    deleteDefaultRichMenu({ accessToken: customAccessToken, }?: {
        accessToken?: string;
    }): Promise<any>;
    /**
     * - Images must have one of the following resolutions: 2500x1686, 2500x843.
     * - You cannot replace an image attached to a rich menu.
     *   To update your rich menu image, create a new rich menu object and upload another image.
     */
    uploadRichMenuImage(richMenuId: string, image: Buffer, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<any>;
    downloadRichMenuImage(richMenuId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<Buffer | null>;
    /**
     * Account link
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#account-link
     */
    issueLinkToken(userId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<{
        issueToken: string;
    }>;
    /**
     * LINE Front-end Framework (LIFF)
     *
     * https://developers.line.me/en/docs/liff/reference/#add-liff-app
     */
    getLiffAppList({ accessToken: customAccessToken, }?: {
        accessToken?: string;
    }): Promise<{
        liffId: string;
        view: LiffView;
    }>;
    createLiffApp(view: LiffView, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<{
        liffId: string;
    }>;
    updateLiffApp(liffId: string, view: LiffView, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<void>;
    deleteLiffApp(liffId: string, { accessToken: customAccessToken }?: {
        accessToken?: string;
    }): Promise<void>;
}
export {};
//# sourceMappingURL=LineClient.d.ts.map