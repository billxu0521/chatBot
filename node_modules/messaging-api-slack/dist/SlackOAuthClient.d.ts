import { AxiosInstance } from 'axios';
import { SlackAttachment, SlackAvailableMethod, SlackChannel, SlackOAuthAPIResponse, SlackUser } from './SlackTypes';
declare type CommonOptions = {
    token?: string;
    accessToken?: string;
};
declare type PostEphemeralOptions = CommonOptions & {
    as_user?: boolean;
    attachments?: string | SlackAttachment[];
    link_names?: boolean;
    parse?: 'none' | 'full';
};
declare type GetInfoOptions = CommonOptions & {
    include_locale?: boolean;
};
declare type WithCursorOptions = CommonOptions & {
    cursor?: string;
};
declare type ConversationListOptions = CommonOptions & {
    cursor?: string;
    exclude_archived?: boolean;
    limit?: number;
    types?: string;
};
declare type ClientConfig = {
    accessToken: string;
    origin?: string;
    onRequest?: Function;
};
interface PostMessageOptions extends CommonOptions {
    as_user?: boolean;
    attachments?: string | SlackAttachment[];
    icon_emoji?: string;
    icon_url?: string;
    link_names?: boolean;
    parse?: 'none' | 'full';
    reply_broadcast?: boolean;
    thread_ts?: string;
    unfurl_links?: boolean;
    unfurl_media?: boolean;
    username?: string;
}
export default class SlackOAuthClient {
    _token: string;
    _onRequest: Function;
    _axios: AxiosInstance;
    static connect(accessTokenOrConfig: string | ClientConfig): SlackOAuthClient;
    constructor(accessTokenOrConfig: string | ClientConfig);
    readonly axios: AxiosInstance;
    readonly accessToken: string;
    callMethod(method: SlackAvailableMethod, _body?: Record<string, any>): Promise<SlackOAuthAPIResponse>;
    /**
     * Gets information about a public channel.
     *
     * https://api.slack.com/methods/channels.info
     */
    getChannelInfo(channelId: string, options?: GetInfoOptions): Promise<SlackChannel>;
    /**
     * Lists all public channels in a Slack team.
     *
     * https://api.slack.com/methods/channels.list
     * FIXME: [breaking] support cursor, exclude_archived, exclude_members, limit
     */
    getChannelList(options?: CommonOptions): Promise<SlackChannel[]>;
    /**
     * Retrieve information about a conversation.
     *
     * https://api.slack.com/methods/conversations.info
     */
    getConversationInfo(channelId: string, options?: GetInfoOptions): Promise<SlackChannel>;
    /**
     * Retrieve members of a conversation.
     *
     * https://api.slack.com/methods/conversations.members
     */
    getConversationMembers(channelId: string, options?: WithCursorOptions): Promise<{
        members: string[];
        next?: string;
    }>;
    getAllConversationMembers(channelId: string, options?: CommonOptions): Promise<string[]>;
    /**
     * Lists all channels in a Slack team.
     *
     * https://api.slack.com/methods/conversations.list
     */
    getConversationList(options?: ConversationListOptions): Promise<{
        channels: SlackChannel[];
        next?: string;
    }>;
    getAllConversationList(options?: ConversationListOptions): Promise<SlackChannel[]>;
    /**
     * Sends a message to a channel.
     *
     * https://api.slack.com/methods/chat.postMessage
     */
    postMessage(channel: string, message: {
        text?: string;
        attachments?: SlackAttachment[] | string;
    } | string, options?: PostMessageOptions): Promise<SlackOAuthAPIResponse>;
    /**
     * Sends an ephemeral message to a user in a channel.
     *
     * https://api.slack.com/methods/chat.postMessage
     */
    postEphemeral(channel: string, user: string, message: {
        text?: string;
        attachments?: SlackAttachment[] | string;
    } | string, options?: PostEphemeralOptions): Promise<SlackOAuthAPIResponse>;
    /**
     * Gets information about a user.
     *
     * https://api.slack.com/methods/users.info
     */
    getUserInfo(userId: string, options?: GetInfoOptions): Promise<SlackUser>;
    /**
     * Lists all users in a Slack team.
     *
     * https://api.slack.com/methods/users.list
     * FIXME: [breaking] support include_locale, limit, presence
     */
    getUserList(cursorOrOptions?: string | WithCursorOptions): Promise<{
        members: SlackUser[];
        next?: string;
    }>;
    getAllUserList(options?: CommonOptions): Promise<SlackUser[]>;
}
export {};
//# sourceMappingURL=SlackOAuthClient.d.ts.map