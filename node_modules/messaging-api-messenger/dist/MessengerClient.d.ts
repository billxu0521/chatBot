import FormData from 'form-data';
import { AxiosInstance } from 'axios';
import { AccessTokenOptions, AirlineBoardingPassAttributes, AirlineCheckinAttributes, AirlineItineraryAttributes, AirlineUpdateAttributes, Attachment, AudienceType, BatchItem, FileData, GreetingConfig, InsightMetric, InsightOptions, MediaAttachmentPayload, MediaElement, MenuItem, Message, MessageTagResponse, MessagingFeatureReview, MessengerNLPConfig, MessengerProfile, MessengerSubscription, MutationSuccessResponse, OpenGraphElement, PageInfo, PersistentMenu, Persona, ReceiptAttributes, Recipient, SendMessageSuccessResponse, SendOption, SendSenderActionResponse, SenderAction, TemplateAttachmentPayload, TemplateButton, TemplateElement, TokenInfo, UploadOption, User, UserID } from './MessengerTypes';
declare type ClientConfig = {
    accessToken: string;
    appId?: string;
    appSecret?: string;
    version?: string;
    origin?: string;
    onRequest?: Function;
    skipAppSecretProof?: boolean;
};
export default class MessengerClient {
    static connect(accessTokenOrConfig: string | ClientConfig, version?: string): MessengerClient;
    _onRequest: Function;
    _axios: AxiosInstance;
    _accessToken: string;
    _appId?: string;
    _appSecret?: string;
    _version: string;
    constructor(accessTokenOrConfig: string | ClientConfig, version?: string);
    readonly version: string;
    readonly axios: AxiosInstance;
    readonly accessToken: string;
    readonly appSecret: string | undefined;
    /**
     * Get Page Info
     *
     * https://developers.facebook.com/docs/graph-api/using-graph-api
     * id, name
     */
    getPageInfo({ access_token: customAccessToken, }?: AccessTokenOptions): Promise<PageInfo>;
    /**
     * Debug Token
     *
     * https://developers.facebook.com/docs/facebook-login/access-tokens/debugging-and-error-handling
     */
    debugToken({ access_token: customAccessToken, }?: AccessTokenOptions): Promise<TokenInfo>;
    /**
     * Create Subscription
     *
     * https://developers.facebook.com/docs/graph-api/reference/app/subscriptions
     */
    createSubscription({ app_id, object, callback_url, fields, include_values, verify_token, access_token: appAccessToken, }: {
        app_id?: string;
        object?: 'user' | 'page' | 'permissions' | 'payments';
        callback_url: string;
        fields?: string[];
        include_values?: boolean;
        verify_token: string;
        access_token: string;
    }): Promise<{
        success: boolean;
    }>;
    /**
     * Get Subscriptions
     *
     * https://developers.facebook.com/docs/graph-api/reference/app/subscriptions
     */
    getSubscriptions({ app_id, access_token: appAccessToken, }?: {
        app_id?: string;
        access_token?: string;
    }): Promise<MessengerSubscription[]>;
    /**
     * Extract page subscription from subscriptions
     *
     * https://developers.facebook.com/docs/graph-api/reference/app/subscriptions
     */
    getPageSubscription({ app_id, access_token: appAccessToken, }?: {
        app_id?: string;
        access_token?: string;
    }): Promise<MessengerSubscription>;
    /**
     *  Messaging Feature Review API
     *
     *  https://developers.facebook.com/docs/messenger-platform/reference/messaging-feature-review-api
     */
    getMessagingFeatureReview({ access_token: customAccessToken, }?: AccessTokenOptions): Promise<MessagingFeatureReview[]>;
    /**
     * Get User Profile
     *
     * https://www.quora.com/How-connect-Facebook-user-id-to-sender-id-in-the-Facebook-messenger-platform
     * first_name, last_name, profile_pic, locale, timezone, gender
     */
    getUserProfile(userId: string, { access_token: customAccessToken, fields, }?: {
        access_token?: string;
        fields?: string[];
    }): Promise<User>;
    /**
     * Messenger Profile
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api
     */
    getMessengerProfile(fields: string[], { access_token: customAccessToken }?: AccessTokenOptions): Promise<MessengerProfile[]>;
    setMessengerProfile(profile: MessengerProfile, { access_token: customAccessToken }?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    deleteMessengerProfile(fields: string[], { access_token: customAccessToken }?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    /**
     * Get Started Button
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/get-started-button
     */
    getGetStarted(options?: AccessTokenOptions): Promise<{
        payload: string;
    } | null>;
    setGetStarted(payload: string, options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    deleteGetStarted(options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    /**
     * Persistent Menu
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/persistent-menu
     */
    getPersistentMenu(options?: AccessTokenOptions): Promise<PersistentMenu | null>;
    setPersistentMenu(menuItems: MenuItem[] | PersistentMenu, { composer_input_disabled: composerInputDisabled, ...options }?: {
        composer_input_disabled?: boolean;
        access_token?: string;
    }): Promise<MutationSuccessResponse>;
    deletePersistentMenu(options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    /**
     * Greeting Text
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/greeting
     */
    getGreeting(options?: AccessTokenOptions): Promise<GreetingConfig[] | null>;
    setGreeting(greeting: string | GreetingConfig[], options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    deleteGreeting(options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    /**
     * Whitelisted Domains
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/domain-whitelisting
     */
    getWhitelistedDomains(options?: AccessTokenOptions): Promise<string[] | null>;
    setWhitelistedDomains(domains: string[], options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    deleteWhitelistedDomains(options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    /**
     * Account Linking URL
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/account-linking-url
     */
    getAccountLinkingURL(options?: AccessTokenOptions): Promise<string | null>;
    setAccountLinkingURL(linkingURL: string, options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    deleteAccountLinkingURL(options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    /**
     * Payment Settings
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/payment-settings
     */
    getPaymentSettings(options?: AccessTokenOptions): Promise<{
        privacy_url?: string;
        public_key?: string;
        test_users?: string[];
    } | null>;
    setPaymentPrivacyPolicyURL(privacyURL: string, options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    setPaymentPublicKey(key: string, options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    setPaymentTestUsers(users: string[], options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    deletePaymentSettings(options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    /**
     * Target Audience
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/target-audience
     */
    getTargetAudience(options?: AccessTokenOptions): Promise<{
        audience_type: AudienceType;
        countries?: {
            whitelist?: string[];
            blacklist?: string[];
        };
    } | null>;
    setTargetAudience(type: AudienceType, whitelist?: string[], blacklist?: string[], options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    deleteTargetAudience(options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    /**
     * Chat Extension Home URL
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/home-url
     */
    getHomeURL(options?: AccessTokenOptions): Promise<{
        url: string;
        webview_height_ratio: 'tall';
        webview_share_button?: 'hide' | 'show';
        in_test: boolean;
    } | null>;
    setHomeURL(homeURL: string, { webview_share_button, in_test, }: {
        webview_share_button?: 'hide' | 'show';
        in_test: boolean;
    }, options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    deleteHomeURL(options?: AccessTokenOptions): Promise<MutationSuccessResponse>;
    /**
     * Message tags
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags
     */
    getMessageTags({ access_token: customAccessToken, }?: AccessTokenOptions): Promise<MessageTagResponse>;
    /**
     * Send API
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/send-api
     */
    sendRawBody(body: Record<string, any>): Promise<SendMessageSuccessResponse>;
    sendMessage(idOrRecipient: UserID | Recipient, message: Message, options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendMessageFormData(recipient: UserID | Recipient, formdata: FormData, options?: SendOption): Promise<any>;
    /**
     * Content Types
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages#content_types
     */
    sendAttachment(recipient: UserID | Recipient, attachment: Attachment, options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendText(recipient: UserID | Recipient, text: string, options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendAudio(recipient: UserID | Recipient, audio: string | FileData | MediaAttachmentPayload, options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendImage(recipient: UserID | Recipient, image: string | FileData | MediaAttachmentPayload, options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendVideo(recipient: UserID | Recipient, video: string | FileData | MediaAttachmentPayload, options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendFile(recipient: UserID | Recipient, file: string | FileData | MediaAttachmentPayload, options?: SendOption): Promise<SendMessageSuccessResponse>;
    /**
     * Message Templates
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/templates
     */
    sendTemplate(recipient: UserID | Recipient, payload: TemplateAttachmentPayload, options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendButtonTemplate(recipient: UserID | Recipient, text: string, buttons: TemplateButton[], options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendGenericTemplate(recipient: UserID | Recipient, elements: TemplateElement[], { image_aspect_ratio, ...options }?: {
        image_aspect_ratio?: 'horizontal' | 'square';
    } & SendOption): Promise<SendMessageSuccessResponse>;
    sendListTemplate(recipient: UserID | Recipient, elements: TemplateElement[], buttons: TemplateButton[], { top_element_style, ...options }?: {
        top_element_style?: 'large' | 'compact';
    } & SendOption): Promise<SendMessageSuccessResponse>;
    sendOpenGraphTemplate(recipient: UserID | Recipient, elements: OpenGraphElement[], options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendReceiptTemplate(recipient: UserID | Recipient, attrs: ReceiptAttributes, options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendMediaTemplate(recipient: UserID | Recipient, elements: MediaElement[], options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendAirlineBoardingPassTemplate(recipient: UserID | Recipient, attrs: AirlineBoardingPassAttributes, options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendAirlineCheckinTemplate(recipient: UserID | Recipient, attrs: AirlineCheckinAttributes, options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendAirlineItineraryTemplate(recipient: UserID | Recipient, attrs: AirlineItineraryAttributes, options?: SendOption): Promise<SendMessageSuccessResponse>;
    sendAirlineUpdateTemplate(recipient: UserID | Recipient, attrs: AirlineUpdateAttributes, options?: SendOption): Promise<SendMessageSuccessResponse>;
    /**
     * Typing
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/sender-actions
     */
    sendSenderAction(idOrRecipient: UserID | Recipient, action: SenderAction, { access_token: customAccessToken }?: AccessTokenOptions): Promise<SendSenderActionResponse>;
    markSeen(recipient: UserID | Recipient, options?: Record<string, any>): Promise<SendSenderActionResponse>;
    typingOn(recipient: UserID | Recipient, options?: Record<string, any>): Promise<SendSenderActionResponse>;
    typingOff(recipient: UserID | Recipient, options?: Record<string, any>): Promise<SendSenderActionResponse>;
    /**
     * Send Batch Request
     *
     * https://developers.facebook.com/docs/graph-api/making-multiple-requests
     */
    sendBatch(batch: BatchItem[], { access_token: customAccessToken }?: AccessTokenOptions): Promise<SendMessageSuccessResponse[]>;
    /**
     * Broadcast API
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/broadcast-api
     */
    /**
     * Create Message Creative
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/sponsored-messages#creative
     */
    createMessageCreative(messages?: Record<string, any>[], { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    /**
     * Send Broadcast Message
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/broadcast-messages#sending
     */
    sendBroadcastMessage(messageCreativeId: number, options?: Record<string, any>): Promise<any>;
    cancelBroadcast(broadcastId: number, options?: Record<string, any>): Promise<any>;
    getBroadcast(broadcastId: number, options?: Record<string, any>): Promise<any>;
    /**
     * Send Sponsored Message
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/sponsored-messages#message
     */
    sendSponsoredMessage(adAccountId: string, message: Record<string, any>): Promise<any>;
    /**
     * Label API
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/broadcast-messages/target-broadcasts
     */
    /**
     * Create Label
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/broadcast-messages/target-broadcasts#create_label
     */
    createLabel(name: string, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    /**
     * Associating a Label to a PSID
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/broadcast-messages/target-broadcasts#associate_label
     */
    associateLabel(userId: UserID, labelId: number, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    /**
     * Removing a Label From a PSID
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/broadcast-messages/target-broadcasts#associate_label
     */
    dissociateLabel(userId: UserID, labelId: number, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    /**
     * Retrieving Labels Associated with a PSID
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/broadcast-messages/target-broadcasts#get_all_labels
     */
    getAssociatedLabels(userId: UserID, options?: {
        access_token?: string;
        fields?: string[];
    }): Promise<any>;
    /**
     * Retrieving Label Details
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/broadcast-messages/target-broadcasts#get_label_details
     */
    getLabelDetails(labelId: number, options?: {
        access_token?: string;
        fields?: string[];
    }): Promise<any>;
    /**
     * Retrieving a List of All Labels
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/broadcast-messages/target-broadcasts#get_all_labels
     */
    getLabelList(options?: {
        access_token?: string;
        fields?: string[];
    }): Promise<any>;
    /**
     * Deleting a Label
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/broadcast-messages/target-broadcasts#delete_label
     */
    deleteLabel(labelId: number, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    /**
     * Starting a Reach Estimation
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/broadcast-messages/estimate-reach#start
     */
    startReachEstimation(customLabelId: number, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    /**
     * Retrieving a Reach Estimate
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/broadcast-messages/estimate-reach#get
     */
    getReachEstimate(reachEstimationId: number, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    /**
     * Broadcast Metrics
     *
     * Once a broadcast has been delivered, you can find out the total number of people it reached.
     * https://developers.facebook.com/docs/messenger-platform/send-messages/broadcast-messages/#metrics
     */
    getBroadcastMessagesSent(broadcastId: number, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    /**
     * Upload API
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/attachment-upload-api
     */
    uploadAttachment(type: 'audio' | 'image' | 'video' | 'file', attachment: string | FileData, options?: UploadOption): Promise<any>;
    uploadAudio(attachment: string | FileData, options?: UploadOption): Promise<any>;
    uploadImage(attachment: string | FileData, options?: UploadOption): Promise<any>;
    uploadVideo(attachment: string | FileData, options?: UploadOption): Promise<any>;
    uploadFile(attachment: string | FileData, options?: UploadOption): Promise<any>;
    /**
     * Messenger Code API
     *
     * https://developers.facebook.com/docs/messenger-platform/discovery/messenger-codes
     */
    generateMessengerCode(options?: Record<string, any>): Promise<any>;
    /**
     * Handover Protocol API
     *
     * https://developers.facebook.com/docs/messenger-platform/handover-protocol
     */
    /**
     * Pass Thread Control
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/handover-protocol/pass-thread-control
     */
    passThreadControl(recipientId: string, targetAppId: number, metadata?: string, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    passThreadControlToPageInbox(recipientId: string, metadata?: string, options?: Record<string, any>): Promise<any>;
    /**
     * Take Thread Control
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/handover-protocol/take-thread-control
     */
    takeThreadControl(recipientId: string, metadata?: string, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    /**
     * Request Thread Control
     *
     * https://developers.facebook.com/docs/messenger-platform/handover-protocol/request-thread-control/
     */
    requestThreadControl(recipientId: string, metadata?: string, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    /**
     * Secondary Receivers List
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/handover-protocol/secondary-receivers
     */
    getSecondaryReceivers({ access_token: customAccessToken, }?: AccessTokenOptions): Promise<any>;
    /**
     * Getting the Thread Owner
     *
     * https://developers.facebook.com/docs/messenger-platform/handover-protocol/get-thread-owner
     */
    getThreadOwner(recipientId: string, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    /**
     * Page Messaging Insights API
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messaging-insights-api
     */
    getInsights(metrics: InsightMetric[], options?: InsightOptions): Promise<any>;
    getBlockedConversations(options?: Record<string, any>): Promise<any>;
    getReportedConversations(options?: Record<string, any>): Promise<any>;
    getOpenConversations(options?: Record<string, any>): Promise<any>;
    getTotalMessagingConnections(options?: Record<string, any>): Promise<any>;
    getNewConversations(options?: Record<string, any>): Promise<any>;
    /**
     * Built-in NLP API
     *
     * https://developers.facebook.com/docs/messenger-platform/built-in-nlp
     */
    setNLPConfigs(config?: MessengerNLPConfig, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    enableNLP(options?: Record<string, any>): Promise<any>;
    disableNLP(options?: Record<string, any>): Promise<any>;
    /**
     * Logging Custom Events
     *
     * https://developers.facebook.com/docs/app-events/bots-for-messenger#logging-custom-events
     */
    logCustomEvents({ app_id, page_id, page_scoped_user_id, events, access_token: customAccessToken, }: {
        app_id: number;
        page_id: number;
        page_scoped_user_id: UserID;
        events: Record<string, any>[];
        access_token?: string;
    }): Promise<any>;
    /**
     * https://developers.facebook.com/docs/messenger-platform/identity/id-matching#examples
     */
    getUserField({ field, user_id, app_secret, app, page, access_token: customAccessToken, }: {
        field: string;
        user_id: string;
        app_secret: string;
        app?: string;
        page?: string;
        access_token?: string;
    }): Promise<any>;
    /**
     * Given a user ID for a bot in Messenger, retrieve the IDs for apps owned by the same business
     */
    getIdsForApps({ user_id, app_secret, app, page, access_token, }: {
        user_id: string;
        app_secret: string;
        app?: string;
        page?: string;
        access_token?: string;
    }): Promise<any>;
    /**
     * Given a user ID for a Page (associated with a bot), retrieve the IDs for other Pages owned by the same business
     */
    getIdsForPages({ user_id, app_secret, app, page, access_token, }: {
        user_id: string;
        app_secret: string;
        app?: string;
        page?: string;
        access_token?: string;
    }): Promise<any>;
    /**
     * Personas API
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/personas
     */
    /**
     * Creating a Persona
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/personas/#create
     */
    createPersona(persona: Persona, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    /**
     * Retrieving a Persona
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/personas/#get
     */
    getPersona(personaId: string, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
    /**
     * Retrieving All Available Personas
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/personas/#retrieve_all
     */
    getPersonas(cursor?: string, { access_token: customAccessToken }?: AccessTokenOptions): Promise<{
        data: {
            id: string;
            name: string;
            profile_picture_url: string;
        }[];
        paging: {
            cursors: {
                before: string;
                after: string;
            };
        };
    }>;
    getAllPersonas({ access_token: customAccessToken, }?: AccessTokenOptions): Promise<Record<string, any>[]>;
    /**
     * Deleting a Persona
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/personas/#remove
     */
    deletePersona(personaId: string, { access_token: customAccessToken }?: AccessTokenOptions): Promise<any>;
}
export {};
//# sourceMappingURL=MessengerClient.d.ts.map