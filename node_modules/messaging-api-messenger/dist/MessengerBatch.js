"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable camelcase */
const omit_1 = __importDefault(require("lodash/omit"));
const pick_1 = __importDefault(require("lodash/pick"));
const warning_1 = __importDefault(require("warning"));
const Messenger_1 = __importDefault(require("./Messenger"));
function omitUndefinedFields(obj = {}) {
    return JSON.parse(JSON.stringify(obj));
}
function sendRequest(body, options) {
    return Object.assign({ method: 'POST', relative_url: 'me/messages', body }, options);
}
function sendMessage(idOrRecipient, msg, options = {}) {
    const recipient = typeof idOrRecipient === 'string'
        ? {
            id: idOrRecipient,
        }
        : idOrRecipient;
    let messageType = 'UPDATE';
    if (options.messaging_type) {
        messageType = options.messaging_type;
    }
    else if (options.tag) {
        messageType = 'MESSAGE_TAG';
    }
    const batchRequestOptions = pick_1.default(options, ['name', 'depends_on']);
    return sendRequest(Object.assign({ messaging_type: messageType, recipient, message: Messenger_1.default.createMessage(msg, options) }, omitUndefinedFields(omit_1.default(options, ['name', 'depends_on']))), batchRequestOptions);
}
function sendText(recipient, text, options) {
    return sendMessage(recipient, Messenger_1.default.createText(text, options), options);
}
function sendAttachment(recipient, attachment, options) {
    return sendMessage(recipient, Messenger_1.default.createAttachment(attachment, options), options);
}
function sendAudio(recipient, audio, options) {
    return sendMessage(recipient, Messenger_1.default.createAudio(audio, options), options);
}
function sendImage(recipient, image, options) {
    return sendMessage(recipient, Messenger_1.default.createImage(image, options), options);
}
function sendVideo(recipient, video, options) {
    return sendMessage(recipient, Messenger_1.default.createVideo(video, options), options);
}
function sendFile(recipient, file, options) {
    return sendMessage(recipient, Messenger_1.default.createFile(file, options), options);
}
function sendTemplate(recipient, payload, options) {
    return sendMessage(recipient, Messenger_1.default.createTemplate(payload, options), options);
}
function sendButtonTemplate(recipient, text, buttons, options) {
    return sendMessage(recipient, Messenger_1.default.createButtonTemplate(text, buttons, options), options);
}
function sendGenericTemplate(recipient, elements, _a = {}) {
    var { image_aspect_ratio = 'horizontal' } = _a, options = __rest(_a, ["image_aspect_ratio"]);
    return sendMessage(recipient, Messenger_1.default.createGenericTemplate(elements, Object.assign(Object.assign({}, options), { image_aspect_ratio })), options);
}
function sendListTemplate(recipient, elements, buttons, _a = {}) {
    var { top_element_style = 'large' } = _a, options = __rest(_a, ["top_element_style"]);
    return sendMessage(recipient, Messenger_1.default.createListTemplate(elements, buttons, Object.assign(Object.assign({}, options), { top_element_style })), options);
}
function sendOpenGraphTemplate(recipient, elements, options) {
    return sendMessage(recipient, Messenger_1.default.createOpenGraphTemplate(elements, options), options);
}
function sendReceiptTemplate(recipient, attrs, options) {
    return sendMessage(recipient, Messenger_1.default.createReceiptTemplate(attrs, options), options);
}
function sendMediaTemplate(recipient, elements, options) {
    return sendMessage(recipient, Messenger_1.default.createMediaTemplate(elements, options), options);
}
function sendAirlineBoardingPassTemplate(recipient, attrs, options) {
    return sendMessage(recipient, Messenger_1.default.createAirlineBoardingPassTemplate(attrs, options), options);
}
function sendAirlineCheckinTemplate(recipient, attrs, options) {
    return sendMessage(recipient, Messenger_1.default.createAirlineCheckinTemplate(attrs, options), options);
}
function sendAirlineItineraryTemplate(recipient, attrs, options) {
    return sendMessage(recipient, Messenger_1.default.createAirlineItineraryTemplate(attrs, options), options);
}
function sendAirlineUpdateTemplate(recipient, attrs, options) {
    return sendMessage(recipient, Messenger_1.default.createAirlineUpdateTemplate(attrs, options), options);
}
function getUserProfile(userId, options = {}) {
    const batchRequestOptions = pick_1.default(options, ['name', 'depends_on']);
    return Object.assign({ method: 'GET', relative_url: `${userId}`.concat(options.access_token ? `?access_token=${options.access_token}` : '') }, batchRequestOptions);
}
function sendSenderAction(idOrRecipient, action, options = {}) {
    const recipient = typeof idOrRecipient === 'string'
        ? {
            id: idOrRecipient,
        }
        : idOrRecipient;
    const batchRequestOptions = pick_1.default(options, ['name', 'depends_on']);
    return sendRequest(Object.assign({ recipient, sender_action: action }, omitUndefinedFields(omit_1.default(options, ['name', 'depends_on']))), batchRequestOptions);
}
function typingOn(idOrRecipient, options) {
    return sendSenderAction(idOrRecipient, 'typing_on', options);
}
function typingOff(idOrRecipient, options) {
    return sendSenderAction(idOrRecipient, 'typing_off', options);
}
function markSeen(idOrRecipient, options) {
    return sendSenderAction(idOrRecipient, 'mark_seen', options);
}
function passThreadControl(recipientId, targetAppId, metadata, options = {}) {
    const batchRequestOptions = pick_1.default(options, ['name', 'depends_on']);
    return Object.assign({ method: 'POST', relative_url: 'me/pass_thread_control', body: Object.assign({ recipient: { id: recipientId }, target_app_id: targetAppId, metadata }, omitUndefinedFields(omit_1.default(options, ['name', 'depends_on']))) }, batchRequestOptions);
}
function passThreadControlToPageInbox(recipientId, metadata, options = {}) {
    return passThreadControl(recipientId, 263902037430900, metadata, options);
}
function takeThreadControl(recipientId, metadata, options = {}) {
    const batchRequestOptions = pick_1.default(options, ['name', 'depends_on']);
    return Object.assign({ method: 'POST', relative_url: 'me/take_thread_control', body: Object.assign({ recipient: { id: recipientId }, metadata }, omitUndefinedFields(omit_1.default(options, ['name', 'depends_on']))) }, batchRequestOptions);
}
function requestThreadControl(recipientId, metadata, options = {}) {
    const batchRequestOptions = pick_1.default(options, ['name', 'depends_on']);
    return Object.assign({ method: 'POST', relative_url: 'me/request_thread_control', body: Object.assign({ recipient: { id: recipientId }, metadata }, omitUndefinedFields(omit_1.default(options, ['name', 'depends_on']))) }, batchRequestOptions);
}
function getThreadOwner(recipientId, options = {}) {
    const batchRequestOptions = pick_1.default(options, ['name', 'depends_on']);
    return Object.assign({ method: 'GET', relative_url: `me/thread_owner?recipient=${recipientId}`.concat(options.access_token ? `&access_token=${options.access_token}` : ''), responseAccessPath: 'data[0].thread_owner' }, batchRequestOptions);
}
function associateLabel(userId, labelId, options = {}) {
    const batchRequestOptions = pick_1.default(options, ['name', 'depends_on']);
    return Object.assign({ method: 'POST', relative_url: `${labelId}/label`, body: Object.assign({ user: userId }, omitUndefinedFields(omit_1.default(options, ['name', 'depends_on']))) }, batchRequestOptions);
}
function dissociateLabel(userId, labelId, options = {}) {
    const batchRequestOptions = pick_1.default(options, ['name', 'depends_on']);
    return Object.assign({ method: 'DELETE', relative_url: `${labelId}/label`, body: Object.assign({ user: userId }, omitUndefinedFields(omit_1.default(options, ['name', 'depends_on']))) }, batchRequestOptions);
}
function getAssociatedLabels(userId, options = {}) {
    const batchRequestOptions = pick_1.default(options, ['name', 'depends_on']);
    return Object.assign({ method: 'GET', relative_url: `${userId}/custom_labels`.concat(options.access_token ? `?access_token=${options.access_token}` : '') }, batchRequestOptions);
}
function deprecated(name, fn) {
    return (...args) => {
        warning_1.default(false, `\`MessengerBatch.${name}\` is deprecated. Use \`MessengerBatch.${fn.name}\` instead.`);
        return fn(...args);
    };
}
const MessengerBatch = {
    sendRequest,
    sendMessage,
    sendText,
    sendAttachment,
    sendAudio,
    sendImage,
    sendVideo,
    sendFile,
    sendTemplate,
    sendButtonTemplate,
    sendGenericTemplate,
    sendListTemplate: deprecated('sendListTemplate', sendListTemplate),
    sendOpenGraphTemplate: deprecated('sendOpenGraphTemplate', sendOpenGraphTemplate),
    sendReceiptTemplate,
    sendMediaTemplate,
    sendAirlineBoardingPassTemplate,
    sendAirlineCheckinTemplate,
    sendAirlineItineraryTemplate,
    sendAirlineUpdateTemplate,
    getUserProfile,
    sendSenderAction,
    typingOn,
    typingOff,
    markSeen,
    passThreadControl,
    passThreadControlToPageInbox,
    takeThreadControl,
    requestThreadControl,
    getThreadOwner,
    associateLabel,
    dissociateLabel,
    getAssociatedLabels,
};
exports.default = MessengerBatch;
//# sourceMappingURL=MessengerBatch.js.map