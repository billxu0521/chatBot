/// <reference types="node" />
import fs from 'fs';
export declare type UserID = string;
export declare type RecipientWithID = {
    id: UserID;
};
export declare type RecipientWithPhoneNumber = {
    phone_number: string;
    name?: Record<string, any>;
};
export declare type Recipient = RecipientWithID | RecipientWithPhoneNumber;
export declare type UrlMediaAttachmentPayload = {
    url: string;
    is_reusable?: boolean;
};
export declare type AttachmentIdAttachmentPayload = {
    attachment_id: string;
};
export declare type MediaAttachmentPayload = UrlMediaAttachmentPayload | AttachmentIdAttachmentPayload;
export declare type MediaAttachmentType = 'audio' | 'video' | 'image' | 'file';
export declare type FileDataAttachmentPayload = {
    is_reusable?: boolean;
};
export declare type FileDataMediaAttachment = {
    type: MediaAttachmentType;
    payload: FileDataAttachmentPayload;
};
export declare type FileDataMediaAttachmentMessage = {
    attachment: FileDataMediaAttachment;
    quick_replies?: QuickReply[];
};
export declare type MediaAttachment = {
    type: MediaAttachmentType;
    payload: MediaAttachmentPayload;
};
export declare type TemplateAttachmentPayload = {
    template_type: 'button' | 'generic' | 'list' | 'open_graph' | 'media' | 'receipt' | 'airline_boardingpass' | 'airline_checkin' | 'airline_itinerary' | 'airline_update';
    [key: string]: any;
};
export declare type TemplateAttachment = {
    type: 'template';
    payload: TemplateAttachmentPayload;
};
export declare type Attachment = MediaAttachment | TemplateAttachment;
export declare type TextQuickReply = {
    content_type: 'text';
    title: string;
    payload: string;
    image_url?: string;
};
export declare type UserPhoneNumberQuickReply = {
    content_type: 'user_phone_number';
};
export declare type UserEmailQuickReply = {
    content_type: 'user_email';
};
export declare type QuickReply = TextQuickReply | UserPhoneNumberQuickReply | UserEmailQuickReply;
export declare type TextMessage = {
    text?: string;
    quick_replies?: QuickReply[];
};
export declare type AttachmentMessage = {
    attachment?: Attachment;
    quick_replies?: QuickReply[];
};
export declare type Message = TextMessage | AttachmentMessage;
export declare type MessagingType = 'RESPONSE' | 'UPDATE' | 'MESSAGE_TAG' | 'NON_PROMOTIONAL_SUBSCRIPTION';
export declare type MessageTag = 'BUSINESS_PRODUCTIVITY' | 'COMMUNITY_ALERT' | 'CONFIRMED_EVENT_REMINDER' | 'NON_PROMOTIONAL_SUBSCRIPTION' | 'PAIRING_UPDATE' | 'APPLICATION_UPDATE' | 'ACCOUNT_UPDATE' | 'PAYMENT_UPDATE' | 'PERSONAL_FINANCE_UPDATE' | 'SHIPPING_UPDATE' | 'RESERVATION_UPDATE' | 'ISSUE_RESOLUTION' | 'APPOINTMENT_UPDATE' | 'GAME_EVENT' | 'TRANSPORTATION_UPDATE' | 'FEATURE_FUNCTIONALITY_UPDATE' | 'TICKET_UPDATE';
export declare type InsightMetric = 'page_messages_blocked_conversations_unique' | 'page_messages_reported_conversations_unique' | 'page_messages_total_messaging_connections' | 'page_messages_new_conversations_unique';
export declare type AccessTokenOptions = {
    access_token?: string;
};
export declare type InsightOptions = {
    since?: number;
    until?: number;
    access_token?: string;
};
export declare type SendOption = {
    messaging_type?: MessagingType;
    tag?: MessageTag;
    quick_replies?: QuickReply[];
    access_token?: string;
};
export declare type UploadOption = {
    filename?: string;
    is_reusable?: boolean;
    access_token?: string;
};
export declare type TemplateButton = {
    type: string;
    title: string;
    url?: string;
    payload?: string;
    webview_height_ratio?: 'compact' | 'tall' | 'full';
};
export declare type MenuItem = TemplateButton;
export declare type TemplateElement = {
    title: string;
    image_url: string;
    subtitle: string;
    default_action: {
        type: string;
        url: string;
        messenger_extensions: boolean;
        webview_height_ratio: string;
        fallback_url: string;
    };
    buttons: TemplateButton[];
};
export declare type OpenGraphElement = {
    url: string;
    buttons?: TemplateButton[];
};
export declare type MediaElement = {
    media_type: 'image' | 'video';
    attachment_id?: string;
    url?: string;
    buttons?: TemplateButton[];
};
export declare type Address = {
    street_1: string;
    street_2?: string;
    city: string;
    postal_code: string;
    state: string;
    country: string;
};
export declare type Summary = {
    subtotal?: number;
    shipping_cost?: number;
    total_tax?: number;
    total_cost: number;
};
export declare type Adjustment = {
    name?: string;
    ammont?: number;
};
export declare type ReceiptAttributes = {
    recipient_name: string;
    merchant_name?: string;
    order_number: string;
    currency: string;
    payment_method: string;
    timestamp?: string;
    order_url?: string;
    elements?: TemplateElement[];
    address?: Address;
    summary: Summary;
    adjustments?: Adjustment[];
};
export declare type Airport = {
    airport_code: string;
    city: string;
    terminal?: string;
    gate?: string;
};
export declare type FlightSchedule = {
    boarding_time?: string;
    departure_time: string;
    arrival_time?: string;
};
export declare type FlightInfo = {
    flight_number: string;
    departure_airport: Airport;
    arrival_airport: Airport;
    flight_schedule: FlightSchedule;
};
export declare type Field = {
    label: string;
    value: string;
};
export declare type BoardingPass = {
    passenger_name: string;
    pnr_number: string;
    travel_class?: string;
    seat?: string;
    auxiliary_fields?: Field[];
    secondary_fields?: Field[];
    logo_image_url: string;
    header_image_url?: string;
    header_text_field?: Field;
    qr_code?: string;
    barcode_image_url?: string;
    above_bar_code_image_url: string;
    flight_info: FlightInfo;
};
export declare type AirlineBoardingPassAttributes = {
    intro_message: string;
    locale: string;
    boarding_pass: BoardingPass[];
};
export declare type PassengerInfo = {
    passenger_id: string;
    ticket_number?: string;
    name: string;
};
export declare type PassengerSegmentInfo = {
    segment_id: string;
    passenger_id: string;
    seat: string;
    seat_type: string;
    product_info?: string;
};
export declare type PriceInfo = {
    title: string;
    ammont: number;
    currency?: string;
};
export declare type AirlineCheckinAttributes = {
    intro_message: string;
    locale: string;
    theme_color?: string;
    pnr_number: string;
    passenger_info: PassengerInfo[];
    flight_info: FlightInfo[];
    passenger_segment_info: PassengerSegmentInfo[];
    price_info?: PriceInfo[];
    base_price?: number;
    tax?: number;
    total_price: number;
    currency: string;
};
export declare type AirlineItineraryAttributes = {};
export declare type AirlineUpdateAttributes = {};
export declare type SenderAction = string;
export declare type User = {
    first_name: string;
    last_name: string;
    profile_pic: string;
    locale: string;
    timezone: number;
    gender: string;
};
export declare type PersistentMenu = {
    locale: string;
    composer_input_disabled: boolean;
    call_to_actions: MenuItem[];
}[];
export declare type GreetingConfig = {
    locale: string;
    text: string;
};
export declare type AudienceType = 'all' | 'custom' | 'none';
export declare type MessengerProfile = {
    get_started?: {
        payload: string;
    };
    persistent_menu?: PersistentMenu;
    greeting?: {
        locale: string;
        text: string;
    }[];
    whitelisted_domains?: string[];
    account_linking_url?: string;
    payment_settings?: {
        privacy_url?: string;
        public_key?: string;
        test_users?: string[];
    };
    target_audience?: {
        audience_type: AudienceType;
        countries?: {
            whitelist?: string[];
            blacklist?: string[];
        };
    };
    home_url?: {
        url: string;
        webview_height_ratio: 'tall';
        webview_share_button?: 'hide' | 'show';
        in_test: boolean;
    };
};
export declare type MessengerProfileResponse = {
    data: MessengerProfile[];
};
export declare type MutationSuccessResponse = {
    result: string;
};
export declare type SendMessageSuccessResponse = {
    recipient_id: string;
    message_id: string;
};
export declare type SendSenderActionResponse = {
    recipient_id: string;
};
export declare type MessageTagResponse = {
    tag: MessageTag;
    description: string;
}[];
export declare type FileData = Buffer | fs.ReadStream;
export declare type BatchRequestOptions = {
    name?: string;
    depends_on?: string;
};
export declare type BatchItem = {
    method: string;
    relative_url: string;
    name?: string;
    body?: Record<string, any>;
    responseAccessPath?: string;
} & BatchRequestOptions;
export declare type Model = 'CUSTOM' | 'CHINESE' | 'CROATIAN' | 'DANISH' | 'DUTCH' | 'ENGLISH' | 'FRENCH_STANDARD' | 'GERMAN_STANDARD' | 'HEBREW' | 'HUNGARIAN' | 'IRISH' | 'ITALIAN_STANDARD' | 'KOREAN' | 'NORWEGIAN_BOKMAL' | 'POLISH' | 'PORTUGUESE' | 'ROMANIAN' | 'SPANISH' | 'SWEDISH' | 'VIETNAMESE';
export declare type MessengerNLPConfig = {
    nlp_enabled?: boolean;
    model?: Model;
    custom_token?: string;
    verbose?: boolean;
    n_best?: number;
};
export declare type PageInfo = {
    name: string;
    id: string;
};
declare type Scope = string;
export declare type TokenInfo = {
    app_id: string;
    type: 'PAGE' | 'APP' | 'USER';
    application: string;
    data_access_expires_at: number;
    expires_at: number;
    is_valid: true;
    issued_at?: number;
    profile_id: string;
    scopes: Scope[];
    user_id: string;
};
export declare type MessagingFeatureReview = {
    feature: string;
    status: 'pending' | 'rejected' | 'approved' | 'limited';
};
export declare type Persona = {
    name: string;
    profile_picture_url: string;
};
export declare type SubscriptionFields = {
    name: string;
    version: string;
};
export declare type MessengerSubscription = {
    object: string;
    callback_url: string;
    active: boolean;
    fields: SubscriptionFields[];
};
export {};
//# sourceMappingURL=MessengerTypes.d.ts.map