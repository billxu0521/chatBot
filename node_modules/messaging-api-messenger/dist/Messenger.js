"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const form_data_1 = __importDefault(require("form-data"));
const invariant_1 = __importDefault(require("invariant"));
const lodash_omit_1 = __importDefault(require("lodash.omit"));
const warning_1 = __importDefault(require("warning"));
function validateQuickReplies(quickReplies) {
    // quick_replies is limited to 11
    invariant_1.default(Array.isArray(quickReplies) && quickReplies.length <= 11, 'quick_replies is an array and limited to 11');
    quickReplies.forEach(quickReply => {
        if (quickReply.content_type === 'text') {
            // title has a 20 character limit, after that it gets truncated
            invariant_1.default(quickReply.title && quickReply.title.trim().length <= 20, 'title of quick reply has a 20 character limit, after that it gets truncated');
            // payload has a 1000 character limit
            invariant_1.default(quickReply.payload && quickReply.payload.length <= 1000, 'payload of quick reply has a 1000 character limit');
        }
    });
}
function createMessage(msg, options = {}) {
    const message = Object.assign({}, msg);
    if (options.quick_replies &&
        Array.isArray(options.quick_replies) &&
        options.quick_replies.length >= 1) {
        validateQuickReplies(options.quick_replies);
        message.quick_replies = options.quick_replies;
    }
    return message;
}
function createText(text, options = {}) {
    return createMessage({ text }, options);
}
function createMessageFormData(payload, filedata, options = {}) {
    const message = Object.assign({}, payload);
    if (options.quick_replies) {
        validateQuickReplies(options.quick_replies);
        message.quick_replies = options.quick_replies;
    }
    const formdata = new form_data_1.default();
    formdata.append('message', JSON.stringify(message));
    formdata.append('filedata', filedata, lodash_omit_1.default(options, ['quick_replies']));
    return formdata;
}
function createAttachment(attachment, options = {}) {
    return createMessage({
        attachment,
    }, options);
}
function createAttachmentFormData(attachment, filedata, options = {}) {
    return createMessageFormData({
        attachment,
    }, filedata, options);
}
function createAudio(audio, options = {}) {
    if (typeof audio === 'string') {
        const attachment = {
            type: 'audio',
            payload: {
                url: audio,
            },
        };
        return createAttachment(attachment, options);
    }
    const attachment = {
        type: 'audio',
        payload: audio,
    };
    return createAttachment(attachment, options);
}
function createAudioFormData(audio, options = {}) {
    const attachment = {
        type: 'audio',
        payload: {},
    };
    return createAttachmentFormData(attachment, audio, options);
}
function createImage(image, options = {}) {
    if (typeof image === 'string') {
        const attachment = {
            type: 'image',
            payload: {
                url: image,
            },
        };
        return createAttachment(attachment, options);
    }
    const attachment = {
        type: 'image',
        payload: image,
    };
    return createAttachment(attachment, options);
}
function createImageFormData(image, options = {}) {
    const attachment = {
        type: 'image',
        payload: {},
    };
    return createAttachmentFormData(attachment, image, options);
}
function createVideo(video, options = {}) {
    if (typeof video === 'string') {
        const attachment = {
            type: 'video',
            payload: {
                url: video,
            },
        };
        return createAttachment(attachment, options);
    }
    const attachment = {
        type: 'video',
        payload: video,
    };
    return createAttachment(attachment, options);
}
function createVideoFormData(video, options = {}) {
    const attachment = {
        type: 'video',
        payload: {},
    };
    return createAttachmentFormData(attachment, video, options);
}
function createFile(file, options = {}) {
    if (typeof file === 'string') {
        const attachment = {
            type: 'file',
            payload: {
                url: file,
            },
        };
        return createAttachment(attachment, options);
    }
    const attachment = {
        type: 'file',
        payload: file,
    };
    return createAttachment(attachment, options);
}
function createFileFormData(file, options = {}) {
    const attachment = {
        type: 'file',
        payload: {},
    };
    return createAttachmentFormData(attachment, file, options);
}
function createTemplate(payload, options = {}) {
    return createAttachment({
        type: 'template',
        payload,
    }, options);
}
function createButtonTemplate(text, buttons, options = {}) {
    return createTemplate({
        template_type: 'button',
        text,
        buttons,
    }, options);
}
function createGenericTemplate(elements, options = {}) {
    return createTemplate({
        template_type: 'generic',
        elements,
        image_aspect_ratio: options.image_aspect_ratio || 'horizontal',
    }, options);
}
function createListTemplate(elements, buttons, options = {}) {
    return createTemplate({
        template_type: 'list',
        elements,
        buttons,
        top_element_style: options.top_element_style || 'large',
    }, options);
}
function createOpenGraphTemplate(elements, options = {}) {
    return createTemplate({
        template_type: 'open_graph',
        elements,
    }, options);
}
function createMediaTemplate(elements, options = {}) {
    return createTemplate({
        template_type: 'media',
        elements,
    }, options);
}
function createReceiptTemplate(attrs, options = {}) {
    return createTemplate(Object.assign({ template_type: 'receipt' }, attrs), options);
}
function createAirlineBoardingPassTemplate(attrs, options = {}) {
    return createTemplate(Object.assign({ template_type: 'airline_boardingpass' }, attrs), options);
}
function createAirlineCheckinTemplate(attrs, options = {}) {
    return createTemplate(Object.assign({ template_type: 'airline_checkin' }, attrs), options);
}
function createAirlineItineraryTemplate(attrs, options = {}) {
    return createTemplate(Object.assign({ template_type: 'airline_itinerary' }, attrs), options);
}
function createAirlineUpdateTemplate(attrs, options = {}) {
    return createTemplate(Object.assign({ template_type: 'airline_update' }, attrs), options);
}
function deprecated(name, fn) {
    return (...args) => {
        warning_1.default(false, `\`Messenger.${name}\` is deprecated. Use \`Messenger.${fn.name}\` instead.`);
        return fn(...args);
    };
}
const Messenger = {
    createMessage,
    createText,
    createAttachment,
    createAudio,
    createAudioFormData,
    createImage,
    createImageFormData,
    createVideo,
    createVideoFormData,
    createFile,
    createFileFormData,
    createTemplate,
    createButtonTemplate,
    createGenericTemplate,
    createListTemplate: deprecated('createListTemplate', createListTemplate),
    createOpenGraphTemplate: deprecated('createOpenGraphTemplate', createOpenGraphTemplate),
    createMediaTemplate,
    createReceiptTemplate,
    createAirlineBoardingPassTemplate,
    createAirlineCheckinTemplate,
    createAirlineItineraryTemplate,
    createAirlineUpdateTemplate,
};
exports.default = Messenger;
//# sourceMappingURL=Messenger.js.map