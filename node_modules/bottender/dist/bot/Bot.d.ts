/// <reference types="node" />
import EventEmitter from 'events';
import SessionStore from '../session/SessionStore';
import { Action, Plugin } from '../types';
import { Connector } from './Connector';
declare type Builder = {
    build: () => Action;
};
export declare function run(action: Action): Action;
declare type RequestHandler<B> = (body: B, requestContext?: Record<string, any> | null) => void | Promise<void>;
export default class Bot<B, C> {
    _sessions: SessionStore;
    _initialized: boolean;
    _connector: Connector<B, C>;
    _handler: Action | null;
    _errorHandler: Action | null;
    _initialState: Record<string, any>;
    _plugins: Function[];
    _sync: boolean;
    _emitter: EventEmitter;
    constructor({ connector, sessionStore, sync, }: {
        connector: Connector<B, C>;
        sessionStore?: SessionStore;
        sync?: boolean;
    });
    readonly connector: Connector<B, C>;
    readonly sessions: SessionStore;
    readonly handler: Action | null;
    readonly emitter: EventEmitter;
    onEvent(handler: Action | Builder): Bot<B, C>;
    onError(handler: Action | Builder): Bot<B, C>;
    setInitialState(initialState: Record<string, any>): Bot<B, C>;
    use(plugin: Plugin): Bot<B, C>;
    initSessionStore(): Promise<void>;
    createRequestHandler(): RequestHandler<B>;
}
export {};
//# sourceMappingURL=Bot.d.ts.map