/// <reference types="node" />
import EventEmitter from 'events';
import ConsoleContext from '../context/ConsoleContext';
import ConsoleEvent, { ConsoleRawEvent } from '../context/ConsoleEvent';
import Session from '../session/Session';
import { ConsoleClient } from '../context/ConsoleClient';
import { Connector } from './Connector';
declare type ConsoleRequestBody = ConsoleRawEvent;
declare type ConstructorOptions = {
    client?: ConsoleClient;
    fallbackMethods?: boolean;
    mockPlatform?: string;
};
export default class ConsoleConnector implements Connector<ConsoleRequestBody, ConsoleClient> {
    _client: ConsoleClient;
    _fallbackMethods: boolean;
    _platform: string;
    constructor({ client, fallbackMethods, mockPlatform, }?: ConstructorOptions);
    readonly platform: string;
    readonly client: ConsoleClient;
    getUniqueSessionKey(): string;
    updateSession(session: Session): Promise<void>;
    mapRequestToEvents(body: ConsoleRequestBody): ConsoleEvent[];
    createContext(params: {
        event: ConsoleEvent;
        session: Session | null;
        initialState?: Record<string, any> | null;
        requestContext?: Record<string, any> | null;
        emitter: EventEmitter | null;
    }): ConsoleContext;
}
export {};
//# sourceMappingURL=ConsoleConnector.d.ts.map