import Context from '../context/Context';
import { Action, Props } from '../types';
import { PlatformContext } from '../context/PlatformContext';
declare type MatchPattern = string | Array<string> | RegExp;
declare type RoutePattern = '*' | RoutePredicate;
declare type RoutePredicate = (context: Context | PlatformContext) => boolean | Record<string, any> | Promise<boolean | Record<string, any>>;
declare type Route = {
    predicate: RoutePredicate;
    action: Action;
};
declare function router(routes: Route[]): (context: Context, props?: Props) => Promise<Action | undefined>;
declare function route(pattern: RoutePattern, action: Action): {
    predicate: RoutePredicate;
    action: Action;
};
declare function text(pattern: MatchPattern, action: Action): {
    predicate: (context: Context) => any;
    action: Action;
};
declare function payload(pattern: MatchPattern, action: Action): {
    predicate: (context: Context) => any;
    action: Action;
};
declare function platform(pattern: MatchPattern, action: Action): {
    predicate: (context: PlatformContext) => boolean;
    action: Action;
} | {
    predicate: (context: PlatformContext) => RegExpExecArray | null;
    action: Action;
};
export default router;
export { router, route, text, payload, platform };
//# sourceMappingURL=index.d.ts.map