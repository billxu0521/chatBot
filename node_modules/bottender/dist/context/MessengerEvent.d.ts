import { Event } from './Event';
export declare type Sender = {
    id: string;
};
export declare type Recipient = {
    id: string;
};
declare type QuickReply = {
    payload: string;
};
declare type MediaAttachmentPayload = {
    url: string;
};
declare type LocationAttachmentPayload = {
    coordinates: {
        lat: number;
        long: number;
    };
};
declare type AttachmentPayload = MediaAttachmentPayload | LocationAttachmentPayload;
declare type FallbackAttachment = {
    type: 'fallback';
    payload: null;
    title: string;
    URL: string;
};
declare type MediaAttachment = {
    type: string;
    payload: AttachmentPayload;
};
declare type Attachment = MediaAttachment | FallbackAttachment;
declare type Tag = {
    source: string;
};
export declare type Message = {
    is_echo?: boolean;
    text?: string;
    sticker_id?: number;
    quick_reply?: QuickReply;
    attachments?: Attachment[];
    tags?: Tag[];
};
export declare type Delivery = {
    mids: string[];
    watermark: number;
    seq: number;
};
export declare type Read = {
    watermark: number;
    seq: number;
};
export declare type Referral = {
    ref: string;
    source: string;
    type: string;
    origin_domain?: string;
};
export declare type Postback = {
    payload: string;
    referral?: Referral;
};
export declare type GamePlay = {
    game_id: string;
    player_id: string;
    context_type: 'SOLO' | 'THREAD' | 'GROUP';
    context_id: string;
    score: number;
    payload: string;
};
export declare type Optin = {
    ref: string;
};
export declare type Payment = {
    payload: string;
    requested_user_info: Record<string, any>;
    payment_credential: Record<string, any>;
    amount: {
        currency: string;
        amount: string;
    };
    shipping_option_id: string;
};
export declare type CheckoutUpdate = {
    payload: string;
    shipping_address: {
        id: number;
        street_1: string;
        street_2: string;
        city: string;
        state: string;
        country: string;
        postal_code: string;
    };
};
export declare type PreCheckout = {
    payload: string;
    requested_user_info: {
        shipping_address: {
            name: string;
            street_1: string;
            street_2: string;
            city: string;
            state: string;
            country: string;
            postal_code: string;
        };
        contact_name: string;
    };
    amount: {
        currency: string;
        amount: string;
    };
};
export declare type PolicyEnforcement = {
    action: string;
    reason: string;
};
export declare type AppRoles = Record<string, string[]>;
export declare type PassThreadControl = {
    new_owner_app_id: string;
    metadata: string;
};
export declare type TakeThreadControl = {
    previous_owner_app_id: string;
    metadata: string;
};
export declare type RequestThreadControl = {
    requested_owner_app_id: number;
    metadata: string;
};
export declare type BrandedCamera = {
    content_ids: string[];
    event: string;
};
export declare type MessengerRawEvent = {
    sender?: Sender;
    recipient?: Recipient;
    timestamp?: number;
    message?: Message;
    read?: Read;
    delivery?: Delivery;
    postback?: Postback;
    game_play?: GamePlay;
    optin?: Optin;
    payment?: Payment;
    checkout_update?: CheckoutUpdate;
    pre_checkout?: PreCheckout;
    'policy-enforcement'?: PolicyEnforcement;
    app_roles?: AppRoles;
    pass_thread_control?: PassThreadControl;
    take_thread_control?: TakeThreadControl;
    request_thread_control?: RequestThreadControl;
    referral?: Referral;
    branded_camera?: BrandedCamera;
};
declare type MessengerEventOptions = {
    isStandby?: boolean;
    pageId?: string | null;
};
export default class MessengerEvent implements Event<MessengerRawEvent> {
    _rawEvent: MessengerRawEvent;
    _isStandby: boolean;
    _pageId: string | null;
    constructor(rawEvent: MessengerRawEvent, options?: MessengerEventOptions);
    readonly rawEvent: MessengerRawEvent;
    readonly isMessage: boolean;
    readonly message: Message | null;
    readonly isText: boolean;
    readonly text: string | null;
    readonly hasAttachment: boolean;
    readonly attachments: Attachment[] | null;
    readonly isImage: boolean;
    readonly image: MediaAttachmentPayload | null;
    readonly isAudio: boolean;
    readonly audio: MediaAttachmentPayload | null;
    readonly isVideo: boolean;
    readonly video: MediaAttachmentPayload | null;
    readonly isLocation: boolean;
    readonly location: LocationAttachmentPayload | null;
    readonly isFile: boolean;
    readonly file: MediaAttachmentPayload | null;
    readonly isFallback: boolean;
    readonly fallback: FallbackAttachment | null;
    readonly isSticker: boolean;
    readonly sticker: string | null;
    readonly isLikeSticker: boolean;
    readonly isQuickReply: boolean;
    readonly quickReply: QuickReply | null;
    readonly isEcho: boolean;
    readonly isPostback: boolean;
    readonly postback: Postback | null;
    readonly isGamePlay: boolean;
    readonly gamePlay: GamePlay | null;
    readonly isOptin: boolean;
    readonly optin: Optin | null;
    readonly isPayment: boolean;
    readonly payment: Payment | null;
    readonly isCheckoutUpdate: boolean;
    readonly checkoutUpdate: CheckoutUpdate | null;
    readonly isPreCheckout: boolean;
    readonly preCheckout: PreCheckout | null;
    readonly isRead: boolean;
    readonly read: Read | null;
    readonly isDelivery: boolean;
    readonly delivery: Delivery | null;
    readonly isPayload: boolean;
    readonly payload: string | null;
    readonly isPolicyEnforcement: boolean;
    readonly policyEnforcement: PolicyEnforcement | null;
    readonly isAppRoles: boolean;
    readonly appRoles: AppRoles | null;
    readonly isStandby: boolean;
    readonly isPassThreadControl: boolean;
    readonly passThreadControl: PassThreadControl | null;
    readonly isTakeThreadControl: boolean;
    readonly takeThreadControl: TakeThreadControl | null;
    readonly isRequestThreadControl: boolean;
    readonly isRequestThreadControlFromPageInbox: boolean;
    readonly requestThreadControl: RequestThreadControl | null;
    readonly isFromCustomerChatPlugin: boolean;
    readonly isReferral: boolean;
    readonly referral: Referral | null;
    readonly ref: string | null;
    readonly pageId: string | null;
    readonly isBrandedCamera: boolean;
    readonly brandedCamera: BrandedCamera | null;
}
export {};
//# sourceMappingURL=MessengerEvent.d.ts.map