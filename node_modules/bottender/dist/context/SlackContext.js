"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const delay_1 = __importDefault(require("delay"));
const warning_1 = __importDefault(require("warning"));
const Context_1 = __importDefault(require("./Context"));
class SlackContext extends Context_1.default {
    constructor() {
        super(...arguments);
        this._client = this._client;
        this._event = this._event;
        this._session = this._session;
    }
    get platform() {
        return 'slack';
    }
    typing(milliseconds) {
        return __awaiter(this, void 0, void 0, function* () {
            if (milliseconds > 0) {
                yield delay_1.default(milliseconds);
            }
        });
    }
    postMessage(message, options) {
        const channelId = this._getChannelIdFromSession();
        if (!channelId) {
            warning_1.default(false, 'postMessage: should not be called in context without session');
            return Promise.resolve();
        }
        this._isHandled = true;
        return this._client.postMessage(channelId, message, Object.assign({ thread_ts: this._event.rawEvent.thread_ts }, options));
    }
    postEphemeral(message, options = {}) {
        const channelId = this._getChannelIdFromSession();
        if (!channelId) {
            warning_1.default(false, 'postMessage: should not be called in context without session');
            return Promise.resolve();
        }
        this._isHandled = true;
        return this._client.postEphemeral(channelId, this._session.user.id, message, options);
    }
    sendText(text, options) {
        return this.postMessage(text, options);
    }
    _getChannelIdFromSession() {
        if (!this._session)
            return null;
        if (typeof this._session.channel === 'object' &&
            this._session.channel &&
            this._session.channel.id &&
            typeof this._session.channel.id === 'string') {
            return this._session.channel.id;
        }
        return null;
    }
}
exports.default = SlackContext;
//# sourceMappingURL=SlackContext.js.map