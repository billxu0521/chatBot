/// <reference types="node" />
import EventEmitter from 'events';
import Session from '../session/Session';
import ConsoleEvent from './ConsoleEvent';
import Context from './Context';
import { ConsoleClient } from './ConsoleClient';
import { PlatformContext } from './PlatformContext';
declare type Options = {
    client: ConsoleClient;
    event: ConsoleEvent;
    session: Session | null;
    initialState?: Record<string, any> | null;
    requestContext?: Record<string, any> | null;
    fallbackMethods: boolean;
    mockPlatform: string;
    emitter: EventEmitter | null;
};
export default class ConsoleContext extends Context implements PlatformContext {
    _client: ConsoleClient;
    _event: ConsoleEvent;
    _session: Session;
    _fallbackMethods: boolean;
    _mockPlatform: string;
    constructor({ client, event, session, initialState, requestContext, fallbackMethods, mockPlatform, emitter, }: Options);
    readonly platform: string;
    typing(milliseconds: number): Promise<void>;
    sendText(text: string, ...args: any[]): Promise<void>;
    _methodMissing(method: string, args: any[]): Promise<void>;
}
export {};
//# sourceMappingURL=ConsoleContext.d.ts.map