/// <reference types="node" />
import EventEmitter from 'events';
declare type Options = {
    client: any;
    event: any;
    session: any;
    initialState?: Record<string, any> | null;
    requestContext?: Record<string, any> | null;
    emitter?: EventEmitter | null;
};
declare type Response = {
    status: number;
    headers: Record<string, string>;
    body: any;
};
export default class Context {
    _isHandled: boolean;
    _isSessionWritten: boolean;
    _client: any;
    _event: any;
    _session: Record<string, any> | null;
    _initialState?: Record<string, any> | null;
    _requestContext: Record<string, any> | null;
    _emitter: EventEmitter | null;
    response: Response;
    constructor({ client, event, session, initialState, requestContext, emitter, }: Options);
    readonly client: Record<string, any>;
    readonly event: Record<string, any>;
    readonly requestContext: Record<string, any> | null;
    readonly session: Record<string, any> | null;
    readonly isHandled: boolean;
    isSessionWritten: boolean;
    readonly state: Record<string, any>;
    setState(state: Record<string, any>): void;
    resetState(): void;
    emitError(err: Error): void;
}
export {};
//# sourceMappingURL=Context.d.ts.map