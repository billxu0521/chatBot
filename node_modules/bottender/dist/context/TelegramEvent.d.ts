import { Event } from './Event';
declare type TelegramUser = {
    id: number;
    first_name: string;
    last_name?: string;
    username?: string;
    language_code?: string;
};
declare type Photo = {
    file_id: string;
    width: number;
    height: number;
}[];
declare type Audio = {
    file_id: string;
    width: number;
    height: number;
};
declare type Document = {
    file_id: string;
};
declare type Sticker = {
    file_id: string;
    width: number;
    height: number;
};
declare type Video = {
    file_id: string;
    width: number;
    height: number;
    duration: number;
};
declare type Voice = {
    file_id: string;
    duration: number;
};
declare type VideoNote = {
    file_id: string;
    length: number;
    duration: number;
};
declare type Contact = {
    phone_number: string;
    first_name: string;
};
declare type Location = {
    longitude: number;
    latitude: number;
};
declare type Venue = {
    location: Location;
    title: string;
    address: string;
};
declare type File = {
    file_id: string;
};
declare type Game = {
    title: string;
    description: string;
    photo: {
        file_id: string;
        width: number;
        height: number;
    }[];
};
declare type Message = {
    message_id: number;
    from: TelegramUser;
    chat: {
        id: number;
        first_name: string;
        last_name: string;
        type: 'private' | 'group';
    };
    date: number;
    text: string;
    entities: {
        type: 'bot_command';
        offset: number;
        length: number;
    }[];
    reply_to_message?: Message;
    photo?: Photo;
    game?: Game;
    audio?: Audio;
    document?: Document;
    sticker?: Sticker;
    video?: Video;
    voice?: Voice;
    video_note?: VideoNote;
    contact?: Contact;
    location?: Location;
    venue?: Venue;
    file?: File;
};
declare type InlineQuery = {
    id: string;
    from: TelegramUser;
    location?: Location;
    query: string;
    offset: string;
};
declare type ChosenInlineResult = {
    result_id: string;
    from: TelegramUser;
    location?: Location;
    inline_message_id?: string;
    query: string;
};
declare type CallbackQuery = {
    from: TelegramUser;
    message: Message;
    chat_instance: string;
    data: string;
};
declare type ShippingAddress = {
    country_code: string;
    state: string;
    city: string;
    street_line1: string;
    street_line2: string;
    post_code: string;
};
declare type ShippingQuery = {
    id: string;
    from: TelegramUser;
    invoice_payload: string;
    shipping_address: ShippingAddress;
};
declare type OrderInfo = {
    name?: string;
    phone_number?: string;
    email?: string;
    shipping_address?: ShippingAddress;
};
declare type PreCheckoutQuery = {
    id: string;
    from: TelegramUser;
    currency: string;
    total_amount: number;
    invoice_payload: string;
    shipping_option_id?: string;
    order_info?: OrderInfo;
};
export declare type TelegramRawEvent = {
    update_id: number;
    message?: Message;
    edited_message?: Message;
    channel_post?: Message;
    edited_channel_post?: Message;
    inline_query?: InlineQuery;
    chosen_inline_result?: ChosenInlineResult;
    callback_query?: CallbackQuery;
    shipping_query?: ShippingQuery;
    pre_checkout_query?: PreCheckoutQuery;
};
export default class TelegramEvent implements Event<TelegramRawEvent> {
    _rawEvent: TelegramRawEvent;
    constructor(rawEvent: TelegramRawEvent);
    readonly rawEvent: TelegramRawEvent;
    readonly isMessage: boolean;
    readonly message: Message | null;
    readonly isText: boolean;
    readonly text: string | null;
    readonly isReplyToMessage: boolean;
    readonly replyToMessage: Message | null;
    readonly isAudio: boolean;
    readonly audio: Audio | null;
    readonly isDocument: boolean;
    readonly document: Document | null;
    readonly isGame: boolean;
    readonly game: Game | null;
    readonly isPhoto: boolean;
    readonly photo: Photo | null;
    readonly isSticker: boolean;
    readonly sticker: Sticker | null;
    readonly isVideo: boolean;
    readonly video: Video | null;
    readonly isVoice: boolean;
    readonly voice: Voice | null;
    readonly isVideoNote: boolean;
    readonly videoNote: VideoNote | null;
    readonly isContact: boolean;
    readonly contact: Contact | null;
    readonly isLocation: boolean;
    readonly location: Location | null;
    readonly isVenue: boolean;
    readonly venue: Venue | null;
    readonly isEditedMessage: boolean;
    readonly editedMessage: Message | null;
    readonly isChannelPost: boolean;
    readonly channelPost: Message | null;
    readonly isEditedChannelPost: boolean;
    readonly editedChannelPost: Message | null;
    readonly isInlineQuery: boolean;
    readonly inlineQuery: InlineQuery | null;
    readonly isChosenInlineResult: boolean;
    readonly chosenInlineResult: ChosenInlineResult | null;
    readonly isCallbackQuery: boolean;
    readonly callbackQuery: CallbackQuery | null;
    readonly isPayload: boolean;
    readonly payload: string | null;
    readonly isShippingQuery: boolean;
    readonly shippingQuery: ShippingQuery | null;
    readonly isPreCheckoutQuery: boolean;
    readonly preCheckoutQuery: PreCheckoutQuery | null;
}
export {};
//# sourceMappingURL=TelegramEvent.d.ts.map